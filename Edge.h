#include <iostream>
#include "Point.h"
#include "Vector.h"
#ifndef EDGE_H
#define EDGE_H

/**
* @class Edge
* @brief Класс для представления ребра многоугольника в трёхмерном пространстве.
*
* Класс Edge используется для хранения точек начала и коца ребра многоугольника в трёхмерном пространстве.
* Так же реализованны методы для вычисления вектора на котором лежит данное ребро, поиска неизвестных в 
* параметрических уравнении прямой, при поиске уравнения плоскости проходящей через ребро и заданную точку.
* Так же рализован поиск ближайшей точки от заданной точки до ребра и кратчайшее расстояние от заданной точки до ребра.
*/
class Edge 
{
private:
    Point start; ///< Точка начала ребра
    Point end; ///< Точка конца ребра
public:
    /**
    * @brief Выводит координаты точек начала и конца ребра.
    *
    * Печатает координаты точки в стандартный вывод в формате 
    * Start x = ..., y = ..., z = ...
    * End x = ..., y = ..., z = ...
    */
    void print() 
    {
        std::cout << "Start x: " << start.x << "\ty: " << start.y <<  "\tz: " << start.z << std::endl;
        std::cout << "End x: " << end.x << "\ty: " << end.y <<  "\tz: " << end.z << std::endl;
    }

    /**
    * @brief Конструктор с параметрами.
    *
    * Инициализирует вектор с заданными координатами.
    * 
    * @param _start_n Точка начала ребра.
    * @param _end_n Точка конца ребра.
    * 
    */
    Edge (Point start_n, Point end_n);

    Vector op_vector; ///< Направляющий вектор 

    /**
    * @brief Вычисляет направляющий вектор.
    *
    * Этот метод вычисляет вычисляет направляющий вектор на который опирается ребро.
    * 
    */
    void OPVector ();

    /**
    * @brief Вычисляет свободный член в уравнении плоскости.
    *
    * Этот метод вычисляет свободный член в уравнении плоскости на которой лежит направляющий вектор и заданная точка.
    * 
    * @param M Другая точка по которой строится плоскость.
    * @return Свободный член в уравнении плоскости.
    */
    double Found_D(Point M);

    /**
    * @brief Вычисляет параметр t в параметрическом уравнении прямой.
    *
    * Этот метод вычисляет параметр t в параметрическом уравнении прямой на которой лежит ребро. 
    * Параметр находится для точки пересечения прямой и плоскости, на которой лежит прямая и заданная точка M.
    * 
    * @param M Другая точка по которой строится плоскость.
    * @return Параметр t.
    */
    double Found_t(Point M);

    /**
    * @brief Вычисляет проекцию точки на направляющий вектор.
    *
    * Этот метод вычисляет проекцию точки на направляющий вектор.
    * 
    * @param M Точка, проекцию которой мы ищем.
    * 
    * @return Точка проекции.
    */
    Point Find_Projection(Point M);

    /**
    * @brief Вычисляет ближайшую точку на ребре.
    *
    * Этот метод вычисляет ближайшую точку на ребре от заданной точки.
    * 
    * @param M Точка, ближайшую к которой мы ищем.
    * 
    * @return Ближайшая точка.
    */
    Point Find_Closets_Point(Point M);

    /**
    * @brief Вычисляет длину отрезка.
    *
    * Этот метод вычисляет длину отрезка.
    * 
    * @param A Вершина отрезка.
    * @param B Другая вершина отрезка.
    * 
    * @return Длина отрезка.
    */ 
    double Find_Segment_len(Point A, Point B);

    /**
    * @brief Вычисляет ближайшее расстояние от заданной точки до ребра.
    *
    * Этот метод вычисляет ближайшее расстояние от заданной точки до ребра.
    * 
    * @param M Другая заданная точка.
    * 
    * @return Ближайшее расстояние.
    */
    double Find_Closest_Dist(Point M);

    /**
    * @brief Показывает лежит ли заданная точка на ребре или нет.
    *
    * Этот метод показывает лежит ли заданная точка на ребре или нет.
    * 
    * @return Принадлежит точка ребру или нет.
    */
    bool Is_Point_On_Edge(Point M);

};

#endif